# Generated by Django 5.0.6 on 2024-05-13 12:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('phone_number', models.CharField(max_length=20)),
                ('DOB', models.DateField()),
                ('race', models.CharField(max_length=50)),
                ('emergency_contact_name', models.CharField(max_length=50)),
                ('emergency_contact_number', models.CharField(max_length=20)),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('status', models.CharField(choices=[('FT', 'Full-time'), ('PT', 'Part-time')], max_length=2)),
                ('professor_type', models.CharField(max_length=50)),
                ('classes_taught', models.JSONField(blank=True, default=list)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('professor', 'Professor'), ('student', 'Student')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='user_permission', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('phone_number', models.CharField(max_length=20)),
                ('DOB', models.DateField()),
                ('race', models.CharField(max_length=50)),
                ('emergency_contact_name', models.CharField(max_length=50)),
                ('emergency_contact_number', models.CharField(max_length=20)),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('level', models.CharField(blank=True, max_length=50, null=True)),
                ('class_type', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('student_type', models.CharField(blank=True, max_length=50, null=True)),
                ('campus', models.CharField(blank=True, max_length=100, null=True)),
                ('classes_taking', models.JSONField(blank=True, default=list)),
                ('classes_took', models.JSONField(blank=True, default=list)),
                ('grades', models.JSONField(blank=True, default=list)),
                ('advisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advised_students', to='WebApp.professor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CRN', models.CharField(max_length=10)),
                ('title', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20)),
                ('section', models.CharField(max_length=10)),
                ('credits', models.IntegerField()),
                ('prerequisites', models.JSONField(blank=True, default=list)),
                ('meeting_times', models.JSONField(blank=True, default=list)),
                ('attributes', models.JSONField(blank=True, default=dict)),
                ('professor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects_teaching', to='WebApp.professor')),
                ('students', models.ManyToManyField(blank=True, related_name='classes_enrolled', to='WebApp.student')),
            ],
        ),
        migrations.AddField(
            model_name='professor',
            name='classes_teaching',
            field=models.ManyToManyField(blank=True, related_name='professors', to='WebApp.subject'),
        ),
    ]
